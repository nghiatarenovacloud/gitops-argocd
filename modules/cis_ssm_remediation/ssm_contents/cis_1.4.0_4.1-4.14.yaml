description: |
  ### Document Name - RZ-CIS_1.4.0_4.1-4.14


  ## What does this document do?

  Remediates the following CIS findings:


  4.1 - Creates a log metric filter and alarm for unauthorized API calls

  4.2 - Creates a log metric filter and alarm for AWS Management Console
  sign-in without MFA

  4.3 - Creates a log metric filter and alarm for usage of "root"
  account

  4.4 - Creates a log metric filter and alarm for for IAM policy changes

  4.5 - Creates a log metric filter and alarm for CloudTrail
  configuration changes

  4.6 - Creates a log metric filter and alarm for AWS Management Console
  authentication failures

  4.7 - Creates a log metric filter and alarm for disabling or scheduled
  deletion of customer created CMKs

  4.8 - Creates a log metric filter and alarm for S3 bucket policy
  changes

  4.9 - Creates a log metric filter and alarm for AWS Config
  configuration changes

  4.10 - Creates a log metric filter and alarm for security group
  changes

  4.11 - Creates a log metric filter and alarm for changes to Network
  Access Control Lists (NACL)

  4.12 - Creates a log metric filter and alarm for changes to network
  gateways

  4.13 - Creates a log metric filter and alarm for route table changes

  4.14 - Creates a log metric filter and alarm for VPC changes



  ## Input Parameters

  * Finding: (Required) Security Hub finding details JSON

  * AutomationAssumeRole: (Required) The ARN of the role that allows
  Automation to perform the actions on your behalf.


  ## Output Parameters

  * Remediation.Output - Output of remediation runbook.

schemaVersion: "0.3"
parameters:
  LogGroupName:
    type: String
    description: >-
      The name of the Log group to be used to create filters and metric
      alarms
    default: "{{ssm:/Solutions/DEV-SO0111/Metrics_LogGroupName}}"
    allowedPattern: .*
  MetricNamespace:
    type: String
    description: The name of the metric namespace where the metrics will be logged
    default: LogMetrics
    allowedPattern: .*
  KMSKeyArn:
    type: String
    description: The ARN of the KMS key created by RZ for remediations
    default: "{{ssm:/Solutions/DEV-SO0111/CMK_REMEDIATION_ARN}}"
    allowedPattern: >-
      ^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:(?:(?:alias\/[A-Za-z0-9/-_])|(?:key\/(?:[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})))$
  Finding:
    type: StringMap
    description: The input from the Orchestrator Step function for the 4.1 finding
  AutomationAssumeRole:
    type: String
    description: >-
      (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf.
    allowedPattern: ^arn:(?:aws|aws-us-gov|aws-cn):iam::\d{12}:role\/[\w+=,.@-]+$
  RemediationRoleName:
    type: String
    default: RZ-CreateLogMetricFilterAndAlarm
    allowedPattern: ^[\w+=,.@-]+$
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - Remediation.Output
  - ParseInput.AffectedObject
mainSteps:
  - name: ParseInput
    action: aws:executeScript
    inputs:
      Handler: parse_event
      Runtime: python3.8
      Script: >
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import re

        import json

        import boto3

        from botocore.config import Config


        def connect_to_config(boto_config):
            return boto3.client('config', config=boto_config)

        def connect_to_ssm(boto_config):
            return boto3.client('ssm', config=boto_config)

        def get_solution_id():
            return 'SO0111'

        def get_solution_version():
            ssm = connect_to_ssm(
                Config(
                    retries = {
                        'mode': 'standard'
                    },
                    user_agent_extra = f'AwsSolution/{get_solution_id()}/unknown'
                )
            )
            solution_version = 'unknown'
            try:
                ssm_parm_value = ssm.get_parameter(
                    Name=f'/Solutions/{get_solution_id()}/member-version'
                )['Parameter'].get('Value', 'unknown')
                solution_version = ssm_parm_value
            except Exception as e:
                print(e)
                print(f'ERROR getting solution version')
            return solution_version

        def get_shortname(long_name):
            short_name = {
                'aws-foundational-security-best-practices': 'AFSBP',
                'cis-aws-foundations-benchmark': 'CIS',
                'pci-dss': 'PCI',
                'security-control': 'SC'
            }
            return short_name.get(long_name, None)

        def get_config_rule(rule_name):
            boto_config = Config(
                retries = {
                    'mode': 'standard'
                },
                user_agent_extra = f'AwsSolution/{get_solution_id()}/{get_solution_version()}'
            )
            config_rule = None
            try:
                configsvc = connect_to_config(boto_config)
                config_rule = configsvc.describe_config_rules(
                    ConfigRuleNames=[ rule_name ]
                ).get('ConfigRules', [])[0]
            except Exception as e:
                print(e)
                exit(f'ERROR getting config rule {rule_name}')
            return config_rule

        class FindingEvent:
            """
            Finding object returns the parse fields from an input finding json object
            """
            def _get_resource_id(self, parse_id_pattern, resource_index):
                identifier_raw = self.finding_json['Resources'][0]['Id']
                self.resource_id = identifier_raw
                self.resource_id_matches = []

                if parse_id_pattern:
                    identifier_match = re.match(
                        parse_id_pattern,
                        identifier_raw
                    )

                    if identifier_match:
                        for group in range(1, len(identifier_match.groups())+1):
                            self.resource_id_matches.append(identifier_match.group(group))
                        self.resource_id = identifier_match.group(resource_index)
                    else:
                        exit(f'ERROR: Invalid resource Id {identifier_raw}')
            
            def _get_sc_check(self):
                match_finding_id = re.match(
                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:'+
                    'security-control/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
                    self.finding_json['Id']
                )
                if match_finding_id:
                    self.standard_id = get_shortname('security-control')
                    self.control_id = match_finding_id.group(1)

                return match_finding_id

            def _get_standard_info(self):
                match_finding_id = re.match(
                    r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:'+
                    'subscription/(.*?)/v/(\d+\.\d+\.\d+)/(.*)/finding/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})$',
                    self.finding_json['Id']
                )
                if match_finding_id:
                    self.standard_id = get_shortname(match_finding_id.group(1))
                    self.standard_version = match_finding_id.group(2)
                    self.control_id = match_finding_id.group(3)
                else:
                    match_sc_finding_id = self._get_sc_check()
                    if not match_sc_finding_id:
                        self.valid_finding = False
                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json["Id"]}'

            def _get_aws_config_rule(self):
                # config_rule_id refers to the AWS Config Rule that produced the finding
                if "RelatedAWSResources:0/type" in self.finding_json['ProductFields'] and self.finding_json['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':
                    self.aws_config_rule_id = self.finding_json['ProductFields']['RelatedAWSResources:0/name']
                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)

            def _get_region_from_resource_id(self):
                check_for_region = re.match(
                    r'^arn:(?:aws|aws-cn|aws-us-gov):[a-zA-Z0-9]+:([a-z]{2}(?:-gov)?-[a-z]+-\d):.*:.*$',
                    self.finding_json['Resources'][0]['Id']
                )
                if check_for_region:
                    self.resource_region = check_for_region.group(1)

            def __init__(self, finding_json, parse_id_pattern, expected_control_id, resource_index):
                self.valid_finding = True
                self.resource_region = None
                self.control_id = None
                self.aws_config_rule_id = None
                self.aws_config_rule = {}

                """Populate fields"""
                # v1.5
                self.finding_json = finding_json
                self._get_resource_id(parse_id_pattern, resource_index)     # self.resource_id, self.resource_id_matches
                self._get_standard_info()                                   # self.standard_id, self.standard_version, self.control_id

                # V1.4
                self.account_id = self.finding_json.get('AwsAccountId', None)    # deprecate - get Finding.AwsAccountId
                if not re.match(r'^\d{12}$', self.account_id) and self.valid_finding:
                    self.valid_finding = False
                    self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'
                self.finding_id = self.finding_json.get('Id', None)              # deprecate
                self.product_arn = self.finding_json.get('ProductArn', None)
                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\d::product/aws/securityhub$', self.product_arn):
                    if self.valid_finding:
                        self.valid_finding = False
                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'
                self.details = self.finding_json['Resources'][0].get('Details', {})
                # Test mode is used with fabricated finding data to tell the
                # remediation runbook to run in test more (where supported)
                # Currently not widely-used and perhaps should be deprecated.
                self.testmode = bool('testmode' in self.finding_json)
                self.resource = self.finding_json['Resources'][0]
                self._get_region_from_resource_id()
                self._get_aws_config_rule()
                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}

                # Validate control_id
                if not self.control_id:
                    if self.valid_finding:
                        self.valid_finding = False
                        self.invalid_finding_reason = f'Finding Id is invalid: {self.finding_json["Id"]} - missing Control Id'
                elif self.control_id not in expected_control_id:  # ControlId is the expected value
                    if self.valid_finding:
                        self.valid_finding = False
                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'

                if not self.resource_id and self.valid_finding:
                    self.valid_finding = False
                    self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'

                if not self.valid_finding:
                    # Error message and return error data
                    msg = f'ERROR: {self.invalid_finding_reason}'
                    exit(msg)

            def __str__(self):
                return json.dumps(self.__dict__)

        '''

        MAIN

        '''

        def parse_event(event, _):
            finding_event = FindingEvent(event['Finding'], event['parse_id_pattern'], event['expected_control_id'], event.get('resource_index', 1))

            if not finding_event.valid_finding:
                exit('ERROR: Finding is not valid')

            return {
                "account_id": finding_event.account_id,
                "resource_id": finding_event.resource_id,
                "finding_id": finding_event.finding_id,         # Deprecate v1.5.0+
                "control_id": finding_event.control_id,
                "product_arn": finding_event.product_arn,       # Deprecate v1.5.0+
                "object": finding_event.affected_object,
                "matches": finding_event.resource_id_matches,
                "details": finding_event.details,               # Deprecate v1.5.0+
                "testmode": finding_event.testmode,             # Deprecate v1.5.0+
                "resource": finding_event.resource,
                "resource_region": finding_event.resource_region,
                "finding": finding_event.finding_json,
                "aws_config_rule": finding_event.aws_config_rule
            }
      InputPayload:
        Finding: "{{ Finding }}"
        parse_id_pattern: ""
        expected_control_id:
          - "4.1"
          - "4.2"
          - "4.3"
          - "4.4"
          - "4.5"
          - "4.6"
          - "4.7"
          - "4.8"
          - "4.9"
          - "4.10"
          - "4.11"
          - "4.12"
          - "4.13"
          - "4.14"
    outputs:
      - Name: FindingId
        Selector: $.Payload.finding_id
        Type: String
      - Name: ProductArn
        Selector: $.Payload.product_arn
        Type: String
      - Name: AffectedObject
        Selector: $.Payload.object
        Type: StringMap
      - Name: ControlId
        Selector: $.Payload.control_id
        Type: String
  - name: GetMetricFilterAndAlarmInputValue
    action: aws:executeScript
    inputs:
      Handler: verify
      Runtime: python3.8
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0


        unauthorizedAPICallsFilter = {
                "filter_name": "UnauthorizedAPICalls",
                "filter_pattern": '{($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")}',
                "metric_name": "UnauthorizedAPICalls",
                "metric_value": 1,
                "alarm_name": "UnauthorizedAPICalls",
                "alarm_desc": "Alarm for UnauthorizedAPICalls > 0",
                "alarm_threshold": 1
        }


        consoleSignInWithoutMFAFilter = {
                "filter_name": "ConsoleSigninWithoutMFA",
                "filter_pattern": '{($.eventName="ConsoleLogin") && ($.additionalEventData.MFAUsed !="Yes")}',
                "metric_name": "ConsoleSigninWithoutMFA",
                "metric_value": 1,
                "alarm_name": "ConsoleSigninWithoutMFA",
                "alarm_desc": "Alarm for ConsoleSigninWithoutMFA > 0",
                "alarm_threshold": 1
         }

        rootAccountUsageFilter = {
                "filter_name": "RootAccountUsage",
                "filter_pattern": '{$.userIdentity.type="Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !="AwsServiceEvent"}',
                "metric_name": "RootAccountUsage",
                "metric_value": 1,
                "alarm_name": "RootAccountUsage",
                "alarm_desc": "Alarm for RootAccountUsage > 0",
                "alarm_threshold": 1
        }


        iamPolicyChangesFilter = {
                "filter_name": "IAMPolicyChanges",
                "filter_pattern": '{($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}',
                "metric_name": "IAMPolicyChanges",
                "metric_value": 1,
                "alarm_name": "IAMPolicyChanges",
                "alarm_desc": "Alarm for IAMPolicyChanges > 0",
                "alarm_threshold": 1
         }

        cloudtrailChangesFilter = {
                "filter_name": "CloudTrailChanges",
                "filter_pattern": '{($.eventName=CreateTrail) || ($.eventName=UpdateTrail) || ($.eventName=DeleteTrail) || ($.eventName=StartLogging) || ($.eventName=StopLogging)}',
                "metric_name": "CloudTrailChanges",
                "metric_value": 1,
                "alarm_name": "CloudTrailChanges",
                "alarm_desc": "Alarm for CloudTrailChanges > 0",
                "alarm_threshold": 1
        }


        consoleAuthenticationFailureFilter = {
                "filter_name": "ConsoleAuthenticationFailure",
                "filter_pattern": '{($.eventName=ConsoleLogin) && ($.errorMessage="Failed authentication")}',
                "metric_name": "ConsoleAuthenticationFailure",
                "metric_value": 1,
                "alarm_name": "ConsoleAuthenticationFailure",
                "alarm_desc": "Alarm for ConsoleAuthenticationFailure > 0",
                "alarm_threshold": 1
         }

        disableOrDeleteCMKFilter = {
                "filter_name": "DisableOrDeleteCMK",
                "filter_pattern": '{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}',
                "metric_name": "DisableOrDeleteCMK",
                "metric_value": 1,
                "alarm_name": "DisableOrDeleteCMK",
                "alarm_desc": "Alarm for DisableOrDeleteCMK > 0",
                "alarm_threshold": 1
        }


        s3BucketPolicyChangesFilter = {
                "filter_name": "S3BucketPolicyChanges",
                "filter_pattern": '{($.eventSource=s3.amazonaws.com) && (($.eventName=PutBucketAcl) || ($.eventName=PutBucketPolicy) || ($.eventName=PutBucketCors) || ($.eventName=PutBucketLifecycle) || ($.eventName=PutBucketReplication) || ($.eventName=DeleteBucketPolicy) || ($.eventName=DeleteBucketCors) || ($.eventName=DeleteBucketLifecycle) || ($.eventName=DeleteBucketReplication))}',
                "metric_name": "S3BucketPolicyChanges",
                "metric_value": 1,
                "alarm_name": "S3BucketPolicyChanges",
                "alarm_desc": "Alarm for S3BucketPolicyChanges > 0",
                "alarm_threshold": 1
        }


        awsConfigChangesFilter = {
                "filter_name": "AWSConfigChanges",
                "filter_pattern": '{($.eventSource=config.amazonaws.com) && (($.eventName=StopConfigurationRecorder) || ($.eventName=DeleteDeliveryChannel) || ($.eventName=PutDeliveryChannel) || ($.eventName=PutConfigurationRecorder))}',
                "metric_name": "AWSConfigChanges",
                "metric_value": 1,
                "alarm_name": "AWSConfigChanges",
                "alarm_desc": "Alarm for AWSConfigChanges > 0",
                "alarm_threshold": 1
        }


        securityGroupChangesFilter = {
                "filter_name": "SecurityGroupChanges",
                "filter_pattern": '{($.eventName=AuthorizeSecurityGroupIngress) || ($.eventName=AuthorizeSecurityGroupEgress) || ($.eventName=RevokeSecurityGroupIngress) || ($.eventName=RevokeSecurityGroupEgress) || ($.eventName=CreateSecurityGroup) || ($.eventName=DeleteSecurityGroup)}',
                "metric_name": "SecurityGroupChanges",
                "metric_value": 1,
                "alarm_name": "SecurityGroupChanges",
                "alarm_desc": "Alarm for SecurityGroupChanges > 0",
                "alarm_threshold": 1
        }


        networkACLChangesFilter = {
                "filter_name": "NetworkACLChanges",
                "filter_pattern": '{($.eventName=CreateNetworkAcl) || ($.eventName=CreateNetworkAclEntry) || ($.eventName=DeleteNetworkAcl) || ($.eventName=DeleteNetworkAclEntry) || ($.eventName=ReplaceNetworkAclEntry) || ($.eventName=ReplaceNetworkAclAssociation)}',
                "metric_name": "NetworkACLChanges",
                "metric_value": 1,
                "alarm_name": "NetworkACLChanges",
                "alarm_desc": "Alarm for NetworkACLChanges > 0",
                "alarm_threshold": 1
        }


        networkGatewayChangesFilter = {
                "filter_name": "NetworkGatewayChanges",
                "filter_pattern": '{($.eventName=CreateCustomerGateway) || ($.eventName=DeleteCustomerGateway) || ($.eventName=AttachInternetGateway) || ($.eventName=CreateInternetGateway) || ($.eventName=DeleteInternetGateway) || ($.eventName=DetachInternetGateway)}',
                "metric_name": "NetworkGatewayChanges",
                "metric_value": 1,
                "alarm_name": "NetworkGatewayChanges",
                "alarm_desc": "Alarm for NetworkGatewayChanges > 0",
                "alarm_threshold": 1
        }


        routeTableChangesFilter = {
                "filter_name": "RouteTableChanges",
                "filter_pattern": '{($.eventName=CreateRoute) || ($.eventName=CreateRouteTable) || ($.eventName=ReplaceRoute) || ($.eventName=ReplaceRouteTableAssociation) || ($.eventName=DeleteRouteTable) || ($.eventName=DeleteRoute) || ($.eventName=DisassociateRouteTable)}',
                "metric_name": "RouteTableChanges",
                "metric_value": 1,
                "alarm_name": "RouteTableChanges",
                "alarm_desc": "Alarm for RouteTableChanges > 0",
                "alarm_threshold": 1
        }


        vpcChangesFilter = {
                "filter_name": "VPCChanges",
                "filter_pattern": '{($.eventName=CreateVpc) || ($.eventName=DeleteVpc) || ($.eventName=ModifyVpcAttribute) || ($.eventName=AcceptVpcPeeringConnection) || ($.eventName=CreateVpcPeeringConnection) || ($.eventName=DeleteVpcPeeringConnection) || ($.eventName=RejectVpcPeeringConnection) || ($.eventName=AttachClassicLinkVpc) || ($.eventName=DetachClassicLinkVpc) || ($.eventName=DisableVpcClassicLink) || ($.eventName=EnableVpcClassicLink)}',
                "metric_name": "VPCChanges",
                "metric_value": 1,
                "alarm_name": "VPCChanges",
                "alarm_desc": "Alarm for VPCChanges > 0",
                "alarm_threshold": 1
        }


        Cloudwatch_mappings = {
            'cis-aws-foundations-benchmark': {
                '1.2.0': {
                    '3.1': unauthorizedAPICallsFilter,
                    '3.2': consoleSignInWithoutMFAFilter,
                    '3.3': rootAccountUsageFilter,
                    '3.4': iamPolicyChangesFilter,
                    '3.5': cloudtrailChangesFilter,
                    '3.6': consoleAuthenticationFailureFilter,
                    '3.7': disableOrDeleteCMKFilter,
                    '3.8': s3BucketPolicyChangesFilter,
                    '3.9': awsConfigChangesFilter,
                    '3.10': securityGroupChangesFilter,
                    '3.11': networkACLChangesFilter,
                    '3.12': networkGatewayChangesFilter,
                    '3.13': routeTableChangesFilter,
                    '3.14': vpcChangesFilter
                },
                '1.4.0': {
                    '4.3': rootAccountUsageFilter,
                    '4.4': iamPolicyChangesFilter,
                    '4.5': cloudtrailChangesFilter,
                    '4.6': consoleAuthenticationFailureFilter,
                    '4.7': disableOrDeleteCMKFilter,
                    '4.8': s3BucketPolicyChangesFilter,
                    '4.9': awsConfigChangesFilter,
                    '4.10': securityGroupChangesFilter,
                    '4.11': networkACLChangesFilter,
                    '4.12': networkGatewayChangesFilter,
                    '4.13': routeTableChangesFilter,
                    '4.14': vpcChangesFilter
                }
            },
            'security-control': {
                '2.0.0': {
                   "CloudWatch.1": rootAccountUsageFilter,
                   "CloudWatch.2": unauthorizedAPICallsFilter,
                   "CloudWatch.3": consoleSignInWithoutMFAFilter,
                   "CloudWatch.4": iamPolicyChangesFilter,
                   "CloudWatch.5": cloudtrailChangesFilter,
                   "CloudWatch.6": consoleAuthenticationFailureFilter,
                   "CloudWatch.7": disableOrDeleteCMKFilter,
                   "CloudWatch.8": s3BucketPolicyChangesFilter,
                   "CloudWatch.9": awsConfigChangesFilter,
                   "CloudWatch.10": securityGroupChangesFilter,
                   "CloudWatch.11": networkACLChangesFilter,
                   "CloudWatch.12": networkGatewayChangesFilter,
                   "CloudWatch.13": routeTableChangesFilter,
                   "CloudWatch.14": vpcChangesFilter
                }
            }
        }


        def verify(event, _):
            try:
                standard_mapping = Cloudwatch_mappings.get(event['StandardLongName']).get(event['StandardVersion'])
                return standard_mapping.get(event['ControlId'], None) 
            except KeyError as ex:
                exit(f'ERROR: Could not find associated metric filter. Missing parameter: {str(ex)}')

      InputPayload:
        ControlId: "{{ ParseInput.ControlId }}"
        StandardLongName: cis-aws-foundations-benchmark
        StandardVersion: 1.4.0
    outputs:
      - Name: FilterName
        Selector: $.Payload.filter_name
        Type: String
      - Name: FilterPattern
        Selector: $.Payload.filter_pattern
        Type: String
      - Name: MetricName
        Selector: $.Payload.metric_name
        Type: String
      - Name: MetricValue
        Selector: $.Payload.metric_value
        Type: Integer
      - Name: AlarmName
        Selector: $.Payload.alarm_name
        Type: String
      - Name: AlarmDesc
        Selector: $.Payload.alarm_desc
        Type: String
      - Name: AlarmThreshold
        Selector: $.Payload.alarm_threshold
        Type: Integer
  - name: Remediation
    action: aws:executeAutomation
    inputs:
      DocumentName: RZ-CreateLogMetricFilterAndAlarm
      RuntimeParameters:
        AutomationAssumeRole: >-
          arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID
          }}:role/{{ RemediationRoleName }}
        FilterName: "{{ GetMetricFilterAndAlarmInputValue.FilterName }}"
        FilterPattern: "{{ GetMetricFilterAndAlarmInputValue.FilterPattern }}"
        MetricName: "{{ GetMetricFilterAndAlarmInputValue.MetricName }}"
        MetricValue: "{{ GetMetricFilterAndAlarmInputValue.MetricValue }}"
        MetricNamespace: "{{ MetricNamespace }}"
        AlarmName: "{{ GetMetricFilterAndAlarmInputValue.AlarmName }}"
        AlarmDesc: "{{ GetMetricFilterAndAlarmInputValue.AlarmDesc }}"
        AlarmThreshold: "{{ GetMetricFilterAndAlarmInputValue.AlarmThreshold }}"
        LogGroupName: "{{ LogGroupName }}"
        SNSTopicName: DEV-SO0111-SHARR-LocalAlarmNotification
        KMSKeyArn: "{{ KMSKeyArn }}"
  - name: UpdateFinding
    action: aws:executeAwsApi
    inputs:
      Service: securityhub
      Api: BatchUpdateFindings
      FindingIdentifiers:
        - Id: "{{ ParseInput.FindingId }}"
          ProductArn: "{{ ParseInput.ProductArn }}"
      Note:
        Text: >-
          Added metric filter to the log group and notifications to SNS
          topic DEV-SO0111-RZ-LocalAlarmNotification.
        UpdatedBy: RZ-CIS_1.4.0_4.1
      Workflow:
        Status: RESOLVED
    isEnd: true
