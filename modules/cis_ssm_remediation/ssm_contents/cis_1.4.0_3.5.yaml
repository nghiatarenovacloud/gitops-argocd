description: |
  ### Document Name - RZ-CIS_1.4.0_3.5

  ## What does this document do?

  Enables AWS Config:

  * Turns on recording for all resources.

  * Creates an encrypted bucket for Config logging.

  * Creates a logging bucket for access logs for the config bucket

  * Creates an SNS topic for Config notifications

  * Creates a service-linked role


  ## Input Parameters

  * Finding: (Required) Security Hub finding details JSON

  * AutomationAssumeRole: (Required) The ARN of the role that allows
  Automation to perform the actions on your behalf.

schemaVersion: "0.3"
parameters:
  KMSKeyArn:
    type: String
    description: The ARN of the KMS key created by RZ for remediations
    default: "{{ssm:/Solutions/DEV-SO0111/CMK_REMEDIATION_ARN}}"
    allowedPattern: >-
      ^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:(?:(?:alias\/[A-Za-z0-9/-_])|(?:key\/(?:[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})))$
  Finding:
    type: StringMap
    description: The input from the Orchestrator Step function for the 3.5 finding
  AutomationAssumeRole:
    type: String
    description: >-
      (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf.
    allowedPattern: ^arn:(?:aws|aws-us-gov|aws-cn):iam::\d{12}:role\/[\w+=,.@-]+$
  RemediationRoleName:
    type: String
    default: RZ-EnableAWSConfig
    allowedPattern: ^[\w+=,.@-]+$
assumeRole: "{{ AutomationAssumeRole }}"
outputs:
  - Remediation.Output
  - ParseInput.AffectedObject
mainSteps:
  - name: ParseInput
    action: aws:executeScript
    inputs:
      Handler: parse_event
      Runtime: python3.8
      Script: >
        import re
        import json
        import boto3
        from botocore.config import Config

        def connect_to_config(boto_config):
            return boto3.client('config', config=boto_config)

        def connect_to_ssm(boto_config):
            return boto3.client('ssm', config=boto_config)

        def get_renozone_version():
            ssm = connect_to_ssm(
                Config(
                    retries = {
                        'mode': 'standard'
                    },
                    user_agent_extra = f'renozone.io/v/unknown'
                )
            )
            renozone_version = 'unknown'
            try:
                ssm_parm_value = ssm.get_parameter(
                    Name=f'RENOZONE/version'
                )['Parameter'].get('Value', 'unknown')
                renozone_version = ssm_parm_value
            except Exception as e:
                print(e)
                print(f'ERROR getting solution version')
            return renozone_version

        def get_config_rule(rule_name):
            boto_config = Config(
                retries = {
                    'mode': 'standard'
                },
                user_agent_extra = f'renozone.io/v/{get_renozone_version()}'
            )
            config_rule = None
            try:
                configsvc = connect_to_config(boto_config)
                config_rule = configsvc.describe_config_rules(
                    ConfigRuleNames=[ rule_name ]
                ).get('ConfigRules', [])[0]
            except Exception as e:
                print(e)
                exit(f'ERROR getting config rule {rule_name}')
            return config_rule
            
        class FindingEvent:
            def _get_aws_config_rule(self):
                if "RelatedAWSResources:0/type" in self.renozon_object['Finding']['ProductFields'] and self.renozon_object['Finding']['ProductFields']['RelatedAWSResources:0/type'] == 'AWS::Config::ConfigRule':
                    self.aws_config_rule_id = self.renozon_object['Finding']['ProductFields']['RelatedAWSResources:0/name']
                    self.aws_config_rule = get_config_rule(self.aws_config_rule_id)

            def __init__(self, renozon_object, expected_control_id):
                self.renozon_object = renozon_object
                self.finding_object = renozon_object['Finding']
                self.valid_finding = True
                self.aws_config_rule_id = None
                self.aws_config_rule = {}
                self.resource_region = self.renozon_object.get('resourceregion', None)
                self.control_id = self.renozon_object.get('controlid', None)
                resource = self.finding_object.get('Resources', [])[0]
                self.resource_id = resource.get('Id', None)
                self.account_id = self.renozon_object.get('accountid', None)
                if not re.match(r'^\d{12}$', self.account_id) and self.valid_finding:
                    self.valid_finding = False
                    self.invalid_finding_reason = f'AwsAccountId is invalid: {self.account_id}'
                self.finding_id = self.finding_object.get('Id', None)
                self.product_arn = self.finding_object.get('ProductArn', None)
                if not re.match(r'^arn:(?:aws|aws-cn|aws-us-gov):securityhub:[a-z]{2}(?:-gov)?-[a-z]+-\d::product/aws/securityhub$', self.product_arn):
                    if self.valid_finding:
                        self.valid_finding = False
                        self.invalid_finding_reason = f'ProductArn is invalid: {self.product_arn}'
                self.details = resource.get('Details', {})
                self.resource = resource
                self._get_aws_config_rule()
                self.affected_object = {'Type': self.resource['Type'], 'Id': self.resource_id, 'OutputKey': 'Remediation.Output'}
                if not self.control_id:
                    if self.valid_finding:
                        self.valid_finding = False
                        self.invalid_finding_reason = f'Finding Id is invalid: {self.renozon_object["Id"]} - missing Control Id'
                elif self.control_id not in expected_control_id:
                    if self.valid_finding:
                        self.valid_finding = False
                        self.invalid_finding_reason = f'Control Id from input ({self.control_id}) does not match {str(expected_control_id)}'
                if not self.resource_id and self.valid_finding:
                    self.valid_finding = False
                    self.invalid_finding_reason = 'Resource Id is missing from the finding json Resources (Id)'
                if not self.valid_finding:
                    msg = f'ERROR: {self.invalid_finding_reason}'
                    exit(msg)

            def __str__(self):
                return json.dumps(self.__dict__)

        def parse_event(event, _):
            renozone_event = FindingEvent(event['Finding'], event['expected_control_id'])
            if not renozone_event.valid_finding:
                exit('ERROR: Finding is not valid')
            return {
                "account_id": renozone_event.account_id,
                "resource_id": renozone_event.resource_id,
                "finding_id": renozone_event.finding_id,         
                "control_id": renozone_event.control_id,
                "product_arn": renozone_event.product_arn,      
                "object": renozone_event.affected_object,
                "details": renozone_event.details,               
                "resource": renozone_event.resource,
                "resource_region": renozone_event.resource_region,
                "finding": renozone_event.renozon_object,
                "aws_config_rule": renozone_event.aws_config_rule
            }
      InputPayload:
        Finding: "{{ Finding }}"
        parse_id_pattern: ""
        expected_control_id:
          - "3.5"
    outputs:
      - Name: FindingId
        Selector: $.Payload.finding_id
        Type: String
      - Name: ProductArn
        Selector: $.Payload.product_arn
        Type: String
      - Name: AffectedObject
        Selector: $.Payload.object
        Type: StringMap
  - name: Remediation
    action: aws:executeAutomation
    inputs:
      DocumentName: RZ-EnableAWSConfig
      RuntimeParameters:
        AutomationAssumeRole: >-
          arn:{{ global:AWS_PARTITION }}:iam::{{ global:ACCOUNT_ID
          }}:role/{{ RemediationRoleName }}
        SNSTopicName: DEV-SO0111-SHARR-AWSConfigNotification
        KMSKeyArn: "{{ KMSKeyArn }}"
  - name: UpdateFinding
    action: aws:executeAwsApi
    inputs:
      Service: securityhub
      Api: BatchUpdateFindings
      FindingIdentifiers:
        - Id: "{{ ParseInput.FindingId }}"
          ProductArn: "{{ ParseInput.ProductArn }}"
      Note:
        Text: AWS Config enabled
        UpdatedBy: RZ-CIS_1.4.0_3.5
      Workflow:
        Status: RESOLVED
    isEnd: true
