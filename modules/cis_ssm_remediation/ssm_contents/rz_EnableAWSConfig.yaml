schemaVersion: "0.3"
description: >
  ### Document name - RZ-EnableAWSConfig


  ## What does this document do?

  Enables AWS Config:

  * Turns on recording for all resources.

  * Creates an encrypted bucket for Config logging.

  * Creates a logging bucket for access logs for the config bucket

  * Creates an SNS topic for Config notifications

  * Creates a service-linked role


  ## Input Parameters

  * AutomationAssumeRole: (Required) The Amazon Resource Name (ARN) of
  the AWS Identity and Access Management (IAM) role that allows Systems
  Manager Automation to perform the actions on your behalf.

  * KMSKeyArn: KMS Customer-managed key to use for encryption of Config
  log data and SNS Topic

  * AWSServiceRoleForConfig: (Optional) The name of the exiting IAM role
  to use for the Config service. Default:
  aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig

  * SNSTopicName: (Required) Name of the SNS Topic to use to post AWS
  Config messages.


  ## Output Parameters

  * Remediation.Output: STDOUT and messages from the remediation steps.
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: >-
      (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf.
    allowedPattern: ^arn:(?:aws|aws-us-gov|aws-cn):iam::\d{12}:role/[\w+=,.@-]+$
  KMSKeyArn:
    type: String
    description: >-
      The ARN of a KMS key to use for encryption of the SNS Topic and
      Config bucket
    allowedPattern: >-
      ^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:(?:(?:alias/[A-Za-z0-9/-_])|(?:key/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})))$
  AWSServiceRoleForConfig:
    type: String
    default: aws-service-role/config.amazonaws.com/AWSServiceRoleForConfig
    allowedPattern: ^(:?[\w+=,.@-]+/)+[\w+=,.@-]+$
  SNSTopicName:
    type: String
    allowedPattern: ^[a-zA-Z0-9][a-zA-Z0-9-_]{0,255}$
outputs:
  - Remediation.Output
mainSteps:
  - name: CreateTopic
    action: aws:executeScript
    outputs:
      - Name: TopicArn
        Selector: $.Payload.topic_arn
        Type: String
    inputs:
      InputPayload:
        kms_key_arn: "{{KMSKeyArn}}"
        topic_name: "{{SNSTopicName}}"
      Runtime: python3.8
      Handler: create_encrypted_topic
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import json

        import boto3

        from botocore.config import Config

        from botocore.exceptions import ClientError


        boto_config = Config(
            retries ={
                'mode': 'standard'
            }
        )


        def connect_to_sns():
            return boto3.client('sns', config=boto_config)

        def connect_to_ssm():
            return boto3.client('ssm', config=boto_config)

        def create_encrypted_topic(event, _):

            kms_key_arn = event['kms_key_arn']
            new_topic = False
            topic_arn = ''
            topic_name = event['topic_name']

            try:
                sns = connect_to_sns()
                topic_arn = sns.create_topic(
                    Name=topic_name,
                    Attributes={
                        'KmsMasterKeyId': kms_key_arn.split('key/')[1]
                    }
                )['TopicArn']
                new_topic = True

            except ClientError as client_exception:
                exception_type = client_exception.response['Error']['Code']
                if exception_type == 'InvalidParameter':
                    print(f'Topic {topic_name} already exists. This remediation may have been run before.')
                    print('Ignoring exception - remediation continues.')
                    topic_arn = sns.create_topic(
                        Name=topic_name
                    )['TopicArn']
                else:
                    exit(f'ERROR: Unhandled client exception: {client_exception}')

            except Exception as e:
                exit(f'ERROR: could not create SNS Topic {topic_name}: {str(e)}')

            if new_topic:
                try:
                    ssm = connect_to_ssm()
                    ssm.put_parameter(
                        Name='/Solutions/SO0111/SNS_Topic_Config.1',
                        Description='SNS Topic for AWS Config updates',
                        Type='String',
                        Overwrite=True,
                        Value=topic_arn
                    )
                except Exception as e:
                    exit(f'ERROR: could not create SNS Topic {topic_name}: {str(e)}')

            create_topic_policy(topic_arn)

            return {"topic_arn": topic_arn}

        def create_topic_policy(topic_arn):
            sns = connect_to_sns()
            try:
                topic_policy = {
                    "Id": "Policy_ID",
                    "Statement": [
                    {
                        "Sid": "AWSConfigSNSPolicy",
                        "Effect": "Allow",
                        "Principal": {
                        "Service": "config.amazonaws.com"
                        },
                        "Action": "SNS:Publish",
                        "Resource": topic_arn,
                    }]
                }

                sns.set_topic_attributes(
                    TopicArn=topic_arn,
                    AttributeName='Policy',
                    AttributeValue=json.dumps(topic_policy)
                )
            except Exception as e:
                exit(f'ERROR: Failed to SetTopicAttributes for {topic_arn}: {str(e)}')
    isEnd: false
  - name: CreateAccessLoggingBucket
    action: aws:executeAutomation
    isEnd: false
    inputs:
      DocumentName: ASR-CreateAccessLoggingBucket
      RuntimeParameters:
        BucketName: so0111-accesslogs-{{global:ACCOUNT_ID}}-{{global:REGION}}
        AutomationAssumeRole: >-
          arn:{{global:AWS_PARTITION}}:iam::{{global:ACCOUNT_ID}}:role/SO0111-CreateAccessLoggingBucket
  - name: CreateConfigBucket
    action: aws:executeScript
    isEnd: false
    outputs:
      - Name: ConfigBucketName
        Selector: $.Payload.config_bucket
        Type: String
    inputs:
      InputPayload:
        logging_bucket: so0111-accesslogs-{{global:ACCOUNT_ID}}-{{global:REGION}}
        account: "{{global:ACCOUNT_ID}}"
        region: "{{global:REGION}}"
        partition: "{{global:AWS_PARTITION}}"
        kms_key_arn: "{{KMSKeyArn}}"
      Runtime: python3.8
      Handler: create_encrypted_bucket
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import json

        import boto3

        from botocore.config import Config

        from botocore.exceptions import ClientError

        from botocore.retries import bucket


        boto_config = Config(
            retries ={
                'mode': 'standard'
            }
        )


        def connect_to_s3(boto_config):
            return boto3.client('s3', config=boto_config)

        def create_bucket(bucket_name, aws_region):
            s3 = connect_to_s3(boto_config)
            try:
                if aws_region == 'us-east-1':
                    s3.create_bucket(
                        ACL='private',
                        Bucket=bucket_name
                    )
                else:
                    s3.create_bucket(
                        ACL='private',
                        Bucket=bucket_name,
                        CreateBucketConfiguration={
                            'LocationConstraint': aws_region
                        }
                    )
                return "created"

            except ClientError as ex:
                exception_type = ex.response['Error']['Code']
                # bucket already exists - return
                if exception_type in ["BucketAlreadyExists", "BucketAlreadyOwnedByYou"]:
                    print('Bucket ' + bucket_name + ' already exists')
                    return "already exists"
                else:
                    exit(f'ERROR creating bucket {bucket_name}: {str(ex)}')
            except Exception as e:
                exit(f'ERROR creating bucket {bucket_name}: {str(e)}')

        def encrypt_bucket(bucket_name, kms_key):
            s3 = connect_to_s3(boto_config)
            try:
                s3.put_bucket_encryption(
                Bucket=bucket_name,
                ServerSideEncryptionConfiguration={
                'Rules': [
                    {
                    'ApplyServerSideEncryptionByDefault': {
                        'SSEAlgorithm': 'aws:kms',
                        'KMSMasterKeyID': kms_key
                    }
                    }
                ]
                }
            )
            except Exception as e:
                exit(f'ERROR putting bucket encryption for {bucket_name}: {str(e)}')

        def block_public_access(bucket_name):
            s3 = connect_to_s3(boto_config)
            try:
                s3.put_public_access_block(
                    Bucket=bucket_name,
                    PublicAccessBlockConfiguration={
                        'BlockPublicAcls': True,
                        'IgnorePublicAcls': True,
                        'BlockPublicPolicy': True,
                        'RestrictPublicBuckets': True
                    }
                )
            except Exception as e:
                exit(f'ERROR setting public access block for bucket {bucket_name}: {str(e)}')

        def enable_access_logging(bucket_name, logging_bucket):
            s3 = connect_to_s3(boto_config)
            try:
                s3.put_bucket_logging(
                    Bucket=bucket_name,
                    BucketLoggingStatus={
                    'LoggingEnabled': {
                        'TargetBucket': logging_bucket,
                        'TargetPrefix': f'access-logs/{bucket_name}'
                    }
                    }
                )
            except Exception as e:
                exit(f'Error setting access logging for bucket {bucket_name}: {str(e)}')

        def create_bucket_policy(config_bucket, aws_partition):
            s3 = connect_to_s3(boto_config)
            try:
                bucket_policy = {
                    "Version": "2012-10-17",
                    "Statement": [
                    {
                        "Sid": "AWSConfigBucketPermissionsCheck",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "config.amazonaws.com"
                            ]
                        },
                        "Action": "s3:GetBucketAcl",
                        "Resource": "arn:" + aws_partition + ":s3:::" + config_bucket
                    },
                    {
                        "Sid": "AWSConfigBucketExistenceCheck",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "config.amazonaws.com"
                            ]
                        },
                        "Action": "s3:ListBucket",
                        "Resource": "arn:" + aws_partition + ":s3:::" + config_bucket
                    },
                    {
                        "Sid": "AWSConfigBucketDelivery",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "config.amazonaws.com"
                            ]
                        },
                        "Action": "s3:PutObject",
                        "Resource": "arn:" + aws_partition + ":s3:::" + config_bucket + "/*",
                        "Condition": {
                            "StringEquals": {
                                "s3:x-amz-acl": "bucket-owner-full-control"
                            }
                        }
                    }
                    ]
                }
                s3.put_bucket_policy(
                    Bucket=config_bucket,
                    Policy=json.dumps(bucket_policy)
                )
            except Exception as e:
                exit(f'ERROR: PutBucketPolicy failed for {config_bucket}: {str(e)}')

        def create_encrypted_bucket(event, _):

            kms_key_arn = event['kms_key_arn']
            aws_partition = event['partition']
            aws_account = event['account']
            aws_region = event['region']
            logging_bucket = event['logging_bucket']
            bucket_name = 'so0111-aws-config-' + aws_region + '-' + aws_account

            if create_bucket(bucket_name, aws_region) == 'already exists':
                return {"config_bucket": bucket_name}

            encrypt_bucket(bucket_name, kms_key_arn.split('key/')[1])
            block_public_access(bucket_name)
            enable_access_logging(bucket_name, logging_bucket)
            create_bucket_policy(bucket_name, aws_partition)

            return {"config_bucket": bucket_name}
  - name: EnableConfig
    action: aws:executeScript
    outputs:
      - Name: ConfigBucketName
        Selector: $.Payload.config_bucket
        Type: String
    inputs:
      InputPayload:
        partition: "{{global:AWS_PARTITION}}"
        account: "{{global:ACCOUNT_ID}}"
        region: "{{global:REGION}}"
        config_bucket: "{{CreateConfigBucket.ConfigBucketName}}"
        aws_service_role: "{{AWSServiceRoleForConfig}}"
        topic_arn: "{{CreateTopic.TopicArn}}"
      Runtime: python3.8
      Handler: enable_config
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import boto3

        from botocore.config import Config

        from botocore.exceptions import ClientError


        boto_config = Config(
            retries ={
                'mode': 'standard'
            }
        )


        def connect_to_config(boto_config):
            return boto3.client('config', config=boto_config)

        def create_config_recorder(aws_partition, aws_account,
        aws_service_role):
            cfgsvc = connect_to_config(boto_config)
            try:
                config_service_role_arn = 'arn:' + aws_partition + ':iam::' + aws_account + ':role/' + aws_service_role
                cfgsvc.put_configuration_recorder(
                    ConfigurationRecorder={
                        'name': 'default',
                        'roleARN': config_service_role_arn,
                        'recordingGroup': {
                            'allSupported': True,
                            'includeGlobalResourceTypes': True
                        }
                    }
                )
            except ClientError as ex:
                exception_type = ex.response['Error']['Code']
                # recorder already exists - continue
                if exception_type in ["MaxNumberOfConfigurationRecordersExceededException"]:
                    print('Config Recorder already exists. Continuing.')
                else:
                    exit(f'ERROR: Boto3 ClientError enabling Config: {exception_type} - {str(ex)}')
            except Exception as e:
                exit(f'ERROR enabling AWS Config - create_config_recorder: {str(e)}')

        def create_delivery_channel(config_bucket, aws_account,
        topic_arn):
            cfgsvc = connect_to_config(boto_config)
            try:
                cfgsvc.put_delivery_channel(
                    DeliveryChannel={
                        'name': 'default',
                        's3BucketName': config_bucket,
                        's3KeyPrefix': aws_account,
                        'snsTopicARN': topic_arn,
                        'configSnapshotDeliveryProperties': {
                            'deliveryFrequency': 'Twelve_Hours'
                        }
                    }
                )
            except ClientError as ex:
                exception_type = ex.response['Error']['Code']
                # delivery channel already exists - return
                if exception_type in ["MaxNumberOfDeliveryChannelsExceededException"]:
                    print('DeliveryChannel already exists')
                else:
                    exit(f'ERROR: Boto3 ClientError enabling Config: {exception_type} - {str(ex)}')
            except Exception as e:
                exit(f'ERROR enabling AWS Config - create_delivery_channel: {str(e)}')

        def start_recorder():
            cfgsvc = connect_to_config(boto_config)
            try:
                cfgsvc.start_configuration_recorder(
                    ConfigurationRecorderName='default'
                )
            except Exception as e:
                exit(f'ERROR enabling AWS Config: {str(e)}')

        def enable_config(event, _):
            aws_account = event['account']
            aws_partition = event['partition']
            aws_service_role = event['aws_service_role']
            config_bucket = event['config_bucket']
            topic_arn = event['topic_arn']

            create_config_recorder(aws_partition, aws_account, aws_service_role)
            create_delivery_channel(config_bucket, aws_account, topic_arn)
            start_recorder()
    isEnd: false
  - name: Remediation
    action: aws:executeScript
    outputs:
      - Name: Output
        Selector: $
        Type: StringMap
    inputs:
      InputPayload:
        config_bucket: "{{CreateConfigBucket.ConfigBucketName}}"
        logging_bucket: so0111-accesslogs-{{global:ACCOUNT_ID}}-{{global:REGION}}
        sns_topic_arn: "{{CreateTopic.TopicArn}}"
      Runtime: python3.8
      Handler: process_results
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        def process_results(event, _):
            print(f'Created encrypted SNS topic {event["sns_topic_arn"]}')
            print(f'Created encrypted Config bucket {event["config_bucket"]}')
            print(f'Created access logging for Config bucket in bucket {event["logging_bucket"]}')
            print('Enabled AWS Config by creating a default recorder')
            return {
                "response": {
                    "message": "AWS Config successfully enabled",
                    "status": "Success"
                }
            }
    isEnd: true
