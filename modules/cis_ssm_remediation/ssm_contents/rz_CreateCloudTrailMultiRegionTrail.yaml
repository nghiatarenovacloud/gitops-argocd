description: |
  ### Document Name - RZ-CreateCloudTrailMultiRegionTrail

  ## What does this document do?

  Creates a multi-region trail with KMS encryption and enables
  CloudTrail

  Note: this remediation will create a NEW trail.


  ## Input Parameters

  * AutomationAssumeRole: (Required) The ARN of the role that allows
  Automation to perform the actions on your behalf.

  * KMSKeyArn (from SSM): Arn of the KMS key to be used to encrypt data
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  AutomationAssumeRole:
    type: String
    description: >-
      (Required) The ARN of the role that allows Automation to perform
      the actions on your behalf.
    allowedPattern: ^arn:(?:aws|aws-us-gov|aws-cn):iam::\d{12}:role/[\w+=,.@-]+$
  KMSKeyArn:
    type: String
    default: "{{ssm:/Solutions/SO0111/CMK_REMEDIATION_ARN}}"
    description: The ARN of the KMS key created by ASR for this remediation
    allowedPattern: >-
      ^arn:(?:aws|aws-us-gov|aws-cn):kms:(?:[a-z]{2}(?:-gov)?-[a-z]+-\d):\d{12}:(?:(?:alias/[A-Za-z0-9/-_])|(?:key/(?i:[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12})))$
  AWSPartition:
    type: String
    default: aws
    description: Partition for creation of ARNs.
    allowedValues:
      - aws
      - aws-cn
      - aws-us-gov
outputs:
  - Remediation.Output
mainSteps:
  - name: CreateLoggingBucket
    action: aws:executeScript
    outputs:
      - Name: LoggingBucketName
        Selector: $.Payload.logging_bucket
        Type: String
    inputs:
      InputPayload:
        account: "{{global:ACCOUNT_ID}}"
        region: "{{global:REGION}}"
        kms_key_arn: "{{KMSKeyArn}}"
      Runtime: python3.8
      Handler: create_logging_bucket
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import boto3

        from botocore.config import Config

        from botocore.exceptions import ClientError


        ERROR_CREATING_BUCKET = "Error creating bucket "



        def connect_to_s3(boto_config):
            return boto3.client("s3", config=boto_config)


        def create_logging_bucket(event, _):
            boto_config = Config(retries={"mode": "standard"})
            s3 = connect_to_s3(boto_config)

            kms_key_arn = event["kms_key_arn"]
            aws_account = event["account"]
            aws_region = event["region"]
            bucket_name = "so0111-access-logs-" + aws_region + "-" + aws_account

            if create_bucket(s3, bucket_name, aws_region) == "bucket_exists":
                return {"logging_bucket": bucket_name}
            encrypt_bucket(s3, bucket_name, kms_key_arn)
            put_access_block(s3, bucket_name)
            put_bucket_acl(s3, bucket_name)

            return {"logging_bucket": bucket_name}


        def create_bucket(s3, bucket_name, aws_region):
            try:
                kwargs = {"Bucket": bucket_name, "ACL": "private"}
                if aws_region != "us-east-1":
                    kwargs["CreateBucketConfiguration"] = {"LocationConstraint": aws_region}

                s3.create_bucket(**kwargs)

            except ClientError as ex:
                exception_type = ex.response["Error"]["Code"]
                # bucket already exists - return
                if exception_type == "BucketAlreadyOwnedByYou":
                    print("Bucket " + bucket_name + " already exists and is owned by you")
                    return "bucket_exists"
                else:
                    print(ex)
                    exit(ERROR_CREATING_BUCKET + bucket_name)
            except Exception as e:
                print(e)
                exit(ERROR_CREATING_BUCKET + bucket_name)


        def encrypt_bucket(s3, bucket_name, kms_key_arn):
            try:
                s3.put_bucket_encryption(
                    Bucket=bucket_name,
                    ServerSideEncryptionConfiguration={
                        "Rules": [
                            {
                                "ApplyServerSideEncryptionByDefault": {
                                    "SSEAlgorithm": "aws:kms",
                                    "KMSMasterKeyID": kms_key_arn.split("key/")[1],
                                }
                            }
                        ]
                    },
                )
            except Exception as e:
                exit("Error encrypting bucket " + bucket_name + ": " + str(e))


        def put_access_block(s3, bucket_name):
            try:
                s3.put_public_access_block(
                    Bucket=bucket_name,
                    PublicAccessBlockConfiguration={
                        "BlockPublicAcls": True,
                        "IgnorePublicAcls": True,
                        "BlockPublicPolicy": True,
                        "RestrictPublicBuckets": True,
                    },
                )
            except Exception as e:
                exit(
                    "Error setting public access block for bucket "
                    + bucket_name
                    + ": "
                    + str(e)
                )


        def put_bucket_acl(s3, bucket_name):
            try:
                s3.put_bucket_acl(
                    Bucket=bucket_name,
                    GrantReadACP="uri=http://acs.amazonaws.com/groups/s3/LogDelivery",
                    GrantWrite="uri=http://acs.amazonaws.com/groups/s3/LogDelivery",
                )
            except Exception as e:
                exit("Error setting ACL for bucket " + bucket_name + ": " + str(e))
    isEnd: false
  - name: CreateCloudTrailBucket
    action: aws:executeScript
    outputs:
      - Name: CloudTrailBucketName
        Selector: $.Payload.cloudtrail_bucket
        Type: String
    inputs:
      InputPayload:
        account: "{{global:ACCOUNT_ID}}"
        region: "{{global:REGION}}"
        kms_key_arn: "{{KMSKeyArn}}"
        logging_bucket: "{{CreateLoggingBucket.LoggingBucketName}}"
      Runtime: python3.8
      Handler: create_encrypted_bucket
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import boto3

        from botocore.config import Config

        from botocore.exceptions import ClientError



        def connect_to_s3(boto_config):
            return boto3.client("s3", config=boto_config)


        def create_encrypted_bucket(event, _):
            boto_config = Config(retries={"mode": "standard"})
            s3 = connect_to_s3(boto_config)

            kms_key_arn = event["kms_key_arn"]
            aws_account = event["account"]
            aws_region = event["region"]
            logging_bucket = event["logging_bucket"]
            bucket_name = "so0111-aws-cloudtrail-" + aws_account

            if create_s3_bucket(s3, bucket_name, aws_region) == "bucket_exists":
                return {"cloudtrail_bucket": bucket_name}
            put_bucket_encryption(s3, bucket_name, kms_key_arn)
            put_public_access_block(s3, bucket_name)
            put_bucket_logging(s3, bucket_name, logging_bucket)

            return {"cloudtrail_bucket": bucket_name}


        def create_s3_bucket(s3, bucket_name, aws_region):
            try:
                kwargs = {"Bucket": bucket_name, "ACL": "private"}
                if aws_region != "us-east-1":
                    kwargs["CreateBucketConfiguration"] = {"LocationConstraint": aws_region}

                s3.create_bucket(**kwargs)

            except ClientError as client_ex:
                exception_type = client_ex.response["Error"]["Code"]
                if exception_type == "BucketAlreadyOwnedByYou":
                    print("Bucket " + bucket_name + " already exists and is owned by you")
                    return "bucket_exists"
                else:
                    exit("Error creating bucket " + bucket_name + " " + str(client_ex))
            except Exception as e:
                exit("Error creating bucket " + bucket_name + " " + str(e))


        def put_bucket_encryption(s3, bucket_name, kms_key_arn):
            try:
                s3.put_bucket_encryption(
                    Bucket=bucket_name,
                    ServerSideEncryptionConfiguration={
                        "Rules": [
                            {
                                "ApplyServerSideEncryptionByDefault": {
                                    "SSEAlgorithm": "aws:kms",
                                    "KMSMasterKeyID": kms_key_arn.split("key/")[1],
                                }
                            }
                        ]
                    },
                )
            except Exception as e:
                print(e)
                exit(
                    "Error applying encryption to bucket "
                    + bucket_name
                    + " with key "
                    + kms_key_arn
                )


        def put_public_access_block(s3, bucket_name):
            try:
                s3.put_public_access_block(
                    Bucket=bucket_name,
                    PublicAccessBlockConfiguration={
                        "BlockPublicAcls": True,
                        "IgnorePublicAcls": True,
                        "BlockPublicPolicy": True,
                        "RestrictPublicBuckets": True,
                    },
                )
            except Exception as e:
                exit(f"Error setting public access block for bucket {bucket_name}: {str(e)}")


        def put_bucket_logging(s3, bucket_name, logging_bucket):
            try:
                s3.put_bucket_logging(
                    Bucket=bucket_name,
                    BucketLoggingStatus={
                        "LoggingEnabled": {
                            "TargetBucket": logging_bucket,
                            "TargetPrefix": "cloudtrail-access-logs",
                        }
                    },
                )
            except Exception as e:
                print(e)
                exit("Error setting public access block for bucket " + bucket_name)
    isEnd: false
  - name: CreateCloudTrailBucketPolicy
    action: aws:executeScript
    inputs:
      InputPayload:
        cloudtrail_bucket: "{{CreateCloudTrailBucket.CloudTrailBucketName}}"
        partition: "{{AWSPartition}}"
        account: "{{global:ACCOUNT_ID}}"
      Runtime: python3.8
      Handler: create_bucket_policy
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import json

        import boto3

        from botocore.config import Config

        from botocore.exceptions import ClientError


        def connect_to_s3(boto_config):
            return boto3.client('s3', config=boto_config)

        def create_bucket_policy(event, _):

            boto_config = Config(
                retries ={
                  'mode': 'standard'
                }
            )
            s3 = connect_to_s3(boto_config)

            cloudtrail_bucket = event['cloudtrail_bucket']
            aws_partition = event['partition']
            aws_account = event['account']
            try:
                bucket_policy = {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "AWSCloudTrailAclCheck20150319",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "cloudtrail.amazonaws.com"
                                ]
                            },
                            "Action": "s3:GetBucketAcl",
                            "Resource": "arn:" + aws_partition + ":s3:::" + cloudtrail_bucket
                        },
                        {
                            "Sid": "AWSCloudTrailWrite20150319",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "cloudtrail.amazonaws.com"
                                ]
                            },
                            "Action": "s3:PutObject",
                            "Resource": "arn:" + aws_partition + ":s3:::" + cloudtrail_bucket + "/AWSLogs/" + aws_account + "/*",
                            "Condition": {
                                "StringEquals": {
                                    "s3:x-amz-acl": "bucket-owner-full-control"
                                },
                            }
                        },
                        {
                            "Sid": "AllowSSLRequestsOnly",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "s3:*",
                            "Resource": ["arn:" + aws_partition + ":s3:::" + cloudtrail_bucket ,"arn:" + aws_partition + ":s3:::" + cloudtrail_bucket + "/*"],
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            }
                        }
                    ]
                }
                s3.put_bucket_policy(
                    Bucket=cloudtrail_bucket,
                    Policy=json.dumps(bucket_policy)
                )
                return {
                    "output": {
                        "Message": f'Set bucket policy for bucket {cloudtrail_bucket}'
                    }
                }
            except Exception as e:
                print(e)
                exit('PutBucketPolicy failed: ' + str(e))
    isEnd: false
  - name: EnableCloudTrail
    action: aws:executeScript
    outputs:
      - Name: CloudTrailBucketName
        Selector: $.Payload.cloudtrail_bucket
        Type: String
    inputs:
      InputPayload:
        cloudtrail_bucket: "{{CreateCloudTrailBucket.CloudTrailBucketName}}"
        kms_key_arn: "{{KMSKeyArn}}"
      Runtime: python3.8
      Handler: enable_cloudtrail
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        import boto3

        from botocore.config import Config

        from botocore.exceptions import ClientError


        def connect_to_cloudtrail(boto_config):
            return boto3.client('cloudtrail', config=boto_config)

        def enable_cloudtrail(event, _):

            boto_config = Config(
                retries ={
                  'mode': 'standard'
                }
            )
            ct = connect_to_cloudtrail(boto_config)

            try:
                ct.create_trail(
                    Name='multi-region-cloud-trail',
                    S3BucketName=event['cloudtrail_bucket'],
                    IncludeGlobalServiceEvents=True,
                    EnableLogFileValidation=True,
                    IsMultiRegionTrail=True,
                    KmsKeyId=event['kms_key_arn']
                )
                ct.start_logging(
                    Name='multi-region-cloud-trail'
                )
                return {
                    "output": {
                        "Message": f'CloudTrail Trail multi-region-cloud-trail created'
                    }
                }
            except Exception as e:
                exit('Error enabling AWS Config: ' + str(e))
    isEnd: false
  - name: Remediation
    action: aws:executeScript
    outputs:
      - Name: Output
        Selector: $
        Type: StringMap
    inputs:
      InputPayload:
        cloudtrail_bucket: "{{CreateCloudTrailBucket.CloudTrailBucketName}}"
        logging_bucket: "{{CreateLoggingBucket.LoggingBucketName}}"
      Runtime: python3.8
      Handler: process_results
      Script: >-
        # Copyright Amazon.com, Inc. or its affiliates. All Rights
        Reserved.

        # SPDX-License-Identifier: Apache-2.0

        def process_results(event, _):
          print(f'Created encrypted CloudTrail bucket {event["cloudtrail_bucket"]}')
          print(f'Created access logging for CloudTrail bucket in bucket {event["logging_bucket"]}')
          print('Enabled multi-region AWS CloudTrail')
          return {
            "response": {
              "message": "AWS CloudTrail successfully enabled",
              "status": "Success"
            }
          }
    isEnd: true
